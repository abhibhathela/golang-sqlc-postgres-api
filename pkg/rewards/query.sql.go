// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package rewards

import (
	"context"
)

const createScratchCardReward = `-- name: CreateScratchCardReward :one
INSERT INTO scratch_cards_rewards (scratch_card_id, user_id, order_id ,status)
VALUES ($1, $2, $3, $4)
RETURNING id, scratch_card_id, user_id, order_id, status, created_at, updated_at
`

type CreateScratchCardRewardParams struct {
	ScratchCardID int64        `json:"scratch_card_id"`
	UserID        int64        `json:"user_id"`
	OrderID       string       `json:"order_id"`
	Status        RewardStatus `json:"status"`
}

func (q *Queries) CreateScratchCardReward(ctx context.Context, arg CreateScratchCardRewardParams) (ScratchCardsReward, error) {
	row := q.db.QueryRowContext(ctx, createScratchCardReward,
		arg.ScratchCardID,
		arg.UserID,
		arg.OrderID,
		arg.Status,
	)
	var i ScratchCardsReward
	err := row.Scan(
		&i.ID,
		&i.ScratchCardID,
		&i.UserID,
		&i.OrderID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deductScratchCard = `-- name: DeductScratchCard :exec
UPDATE users SET scratch_cards = scratch_cards - 1
WHERE id = $1
`

func (q *Queries) DeductScratchCard(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deductScratchCard, id)
	return err
}

const getScratchCardReward = `-- name: GetScratchCardReward :one
SELECT id, scratch_card_id, user_id, order_id, status, created_at, updated_at FROM scratch_cards_rewards
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetScratchCardReward(ctx context.Context, id int64) (ScratchCardsReward, error) {
	row := q.db.QueryRowContext(ctx, getScratchCardReward, id)
	var i ScratchCardsReward
	err := row.Scan(
		&i.ID,
		&i.ScratchCardID,
		&i.UserID,
		&i.OrderID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getScratchCardRewards = `-- name: GetScratchCardRewards :many
SELECT scr.id, scr.user_id, scr.scratch_card_id, scr.status, sc.reward_type, u.name, u.scratch_cards
FROM scratch_cards_rewards AS scr
JOIN scratch_cards AS sc ON sc.id = scr.scratch_card_id
JOIN users AS u ON u.id = scr.user_id
`

type GetScratchCardRewardsRow struct {
	ID            int64        `json:"id"`
	UserID        int64        `json:"user_id"`
	ScratchCardID int64        `json:"scratch_card_id"`
	Status        RewardStatus `json:"status"`
	RewardType    RewardTypes  `json:"reward_type"`
	Name          string       `json:"name"`
	ScratchCards  int32        `json:"scratch_cards"`
}

func (q *Queries) GetScratchCardRewards(ctx context.Context) ([]GetScratchCardRewardsRow, error) {
	rows, err := q.db.QueryContext(ctx, getScratchCardRewards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScratchCardRewardsRow
	for rows.Next() {
		var i GetScratchCardRewardsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ScratchCardID,
			&i.Status,
			&i.RewardType,
			&i.Name,
			&i.ScratchCards,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScratchCards = `-- name: GetScratchCards :many
SELECT id, schedule, max_cards, max_cards_per_user, weight, reward_type, created_at, updated_at FROM scratch_cards
`

func (q *Queries) GetScratchCards(ctx context.Context) ([]ScratchCard, error) {
	rows, err := q.db.QueryContext(ctx, getScratchCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScratchCard
	for rows.Next() {
		var i ScratchCard
		if err := rows.Scan(
			&i.ID,
			&i.Schedule,
			&i.MaxCards,
			&i.MaxCardsPerUser,
			&i.Weight,
			&i.RewardType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnlockedScratchCardRewardCount = `-- name: GetUnlockedScratchCardRewardCount :one
SELECT COUNT(*) FROM scratch_cards_rewards
WHERE scratch_card_id = $1 AND status = 'success'
`

func (q *Queries) GetUnlockedScratchCardRewardCount(ctx context.Context, scratchCardID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnlockedScratchCardRewardCount, scratchCardID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnlockedScratchCardRewardCountByUser = `-- name: GetUnlockedScratchCardRewardCountByUser :one
SELECT COUNT(*) FROM scratch_cards_rewards
WHERE scratch_card_id = $1 AND user_id = $2 AND status = 'success'
`

type GetUnlockedScratchCardRewardCountByUserParams struct {
	ScratchCardID int64 `json:"scratch_card_id"`
	UserID        int64 `json:"user_id"`
}

func (q *Queries) GetUnlockedScratchCardRewardCountByUser(ctx context.Context, arg GetUnlockedScratchCardRewardCountByUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnlockedScratchCardRewardCountByUser, arg.ScratchCardID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, scratch_cards, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ScratchCards,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateScratchCardReward = `-- name: UpdateScratchCardReward :exec
UPDATE scratch_cards_rewards SET status = $2
WHERE id = $1
`

type UpdateScratchCardRewardParams struct {
	ID     int64        `json:"id"`
	Status RewardStatus `json:"status"`
}

func (q *Queries) UpdateScratchCardReward(ctx context.Context, arg UpdateScratchCardRewardParams) error {
	_, err := q.db.ExecContext(ctx, updateScratchCardReward, arg.ID, arg.Status)
	return err
}

const updateScratchCardRewardByOrderId = `-- name: UpdateScratchCardRewardByOrderId :exec
UPDATE scratch_cards_rewards SET status = $2
WHERE order_id = $1
`

type UpdateScratchCardRewardByOrderIdParams struct {
	OrderID string       `json:"order_id"`
	Status  RewardStatus `json:"status"`
}

func (q *Queries) UpdateScratchCardRewardByOrderId(ctx context.Context, arg UpdateScratchCardRewardByOrderIdParams) error {
	_, err := q.db.ExecContext(ctx, updateScratchCardRewardByOrderId, arg.OrderID, arg.Status)
	return err
}
